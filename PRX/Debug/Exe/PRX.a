;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/9/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 2.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#include "uart.h"
;#include "NRF24L01plus.h"
;
;
;#define Internal_REF  1.78
;#define Tolerance_Res  1.091
;
;uint8_t str[20];
;float voltage_battery  = 0;
;float voltage_reset = 0;
;
;int dipSwitchStatus = 0;
;
;uint8_t RXData[32];
;
;uint8_t status = 0;
;uint8_t ACK_Payload[7] = "Hello1";

	.DSEG
;// Timer 0 overflow interrupt service routine
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0035 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036 // Reinitialize Timer 0 value
; 0000 0037 
; 0000 0038 TCNT0=0x06;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0039 
; 0000 003A // Place your code here
; 0000 003B 
; 0000 003C      if(isDataAvailable(1))
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 003D       {
; 0000 003E        NRF24_Recive(RXData);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003F        nrf24_write_ack();
;PCODE: $00000018 VOL: 0
; 0000 0040        UART_SendString(str,11);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0041       }
; 0000 0042 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;// Voltage Reference: AREF pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
;uint8_t  RxAddress[] ;//= {0xEE,0xDD,0xCC,0xBB,0xAA};
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0049 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 004A ADMUX=adc_input | ADC_VREF_TYPE;
;PCODE: $00000023 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004B // Delay needed for the stabilization of the ADC input voltage
; 0000 004C delay_us(10);
;PCODE: $00000027 VOL: 0
; 0000 004D // Start the AD conversion
; 0000 004E ADCSRA|=(1<<ADSC);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 004F // Wait for the AD conversion to complete
; 0000 0050 while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0051 ADCSRA|=(1<<ADIF);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0052 return ADCW;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0053 }
;PCODE: $00000035 VOL: 0
;
;#include "NRF24L01plus.h"
;void Battery_monitoring(float voltage)
; 0000 0057 {
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0058     if(voltage <= 3.29)
;PCODE: $00000038 VOL: 0
;	voltage -> Y+0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0059     {
; 0000 005A 
; 0000 005B         PORTC.1 = 1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 005C         PORTC.2 = 1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 005D         PORTC.0 = 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 005E         delay_ms(300);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 005F         PORTC.0 = 1;
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0060         delay_ms(300);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0061     }
; 0000 0062     else if( voltage > 3.29 && voltage <=3.42)
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0063     {
; 0000 0064     PORTC.0 = 0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0065     PORTC.1 = 1;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0066     PORTC.2 = 1;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0067     }
; 0000 0068     else if(voltage >3.42 && voltage <= 3.70)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0069     {
; 0000 006A     PORTC.0 = 0;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 006B     PORTC.1 = 0;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006C     PORTC.2 = 1;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 006D     }
; 0000 006E     else if(voltage >3.70)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 006F     {
; 0000 0070     PORTC.0 = 0;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0071     PORTC.1 = 0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0072     PORTC.2 = 0;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0073     }
; 0000 0074     else
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0075     {
; 0000 0076     PORTC.0 = 1;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0077     PORTC.1 = 1;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0078     PORTC.2 = 1;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0079 
; 0000 007A    }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 007B }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;void DipSwitch()
; 0000 007D {
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 007E 
; 0000 007F       //  DDRD &= ~(0b11111111);
; 0000 0080 
; 0000 0081         // Read the status of DIP switches from pins D3 to D7
; 0000 0082             dipSwitchStatus = (PIND  & 0xF8) >> 3;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0083 
; 0000 0084         // Compare the dipSwitchStatus with desired cases using switch
; 0000 0085   switch (dipSwitchStatus) {
;PCODE: $00000093 VOL: 0
; 0000 0086             case 0b00000:
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0087                 // No switches are ON
; 0000 0088                 // Perform corresponding actions
; 0000 0089                 RxAddress[0] = 0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 008A                 RxAddress[1] = 0xDD;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 008B                 RxAddress[2] = 0xCC;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 008C                 RxAddress[3] = 0xBB;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 008D                 RxAddress[4] = 0xCB;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 008E                 NRF24_Write_Register(RF_CH, 0); // will be setup during TX or RX
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 008F              break;
;PCODE: $000000A8 VOL: 0
; 0000 0090             case 0b00001:
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0091                 // Switch D3 is ON, other switches are OFF
; 0000 0092                 // Perform corresponding actions
; 0000 0093                 RxAddress[0] = 0x03;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0094                 RxAddress[1] = 0xDD;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0095                 RxAddress[2] = 0xCC;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0096                 RxAddress[3] = 0xBB;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0097                 RxAddress[4] = 0xCB;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0098                 NRF24_Write_Register(RF_CH, 3); // will be setup during TX or RX
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0099                 break;
;PCODE: $000000BE VOL: 0
; 0000 009A             case 0b00010:
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009B                 // Switch D4 is ON, other switches are OFF
; 0000 009C                 // Perform corresponding actions
; 0000 009D                       RxAddress[0] = 0xEE;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 009E                 RxAddress[1] = 0x06;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009F                 RxAddress[2] = 0xCC;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00A0                 RxAddress[3] = 0xBB;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A1                 RxAddress[4] = 0xCB;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00A2                 NRF24_Write_Register(RF_CH, 6); // will be setup during TX or RX
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00A3              break;
;PCODE: $000000D4 VOL: 0
; 0000 00A4             case 0b00100:
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00A5                 // Switch D5 is ON, other switches are OFF
; 0000 00A6                 // Perform corresponding actions
; 0000 00A7                 RxAddress[0] = 0x09;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A8                 RxAddress[1] = 0xDD;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00A9                 RxAddress[2] = 0xCC;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00AA                 RxAddress[3] = 0xBB;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00AB                 RxAddress[4] = 0xCB;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00AC                 NRF24_Write_Register(RF_CH, 9); // will be setup during TX or RX
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00AD                 break;
;PCODE: $000000EA VOL: 0
; 0000 00AE             case 0b01000:
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00AF                 // Switch D6 is ON, other switches are OFF
; 0000 00B0                 // Perform corresponding actions
; 0000 00B1                 RxAddress[0] = 0x0B;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00B2                 RxAddress[1] = 0xDD;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 00B3                 RxAddress[2] = 0xCC;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00B4                 RxAddress[3] = 0xBB;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00B5                 RxAddress[4] = 0xCB;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00B6                 NRF24_Write_Register(RF_CH, 12); // will be setup during TX or RX
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00B7                   break;
;PCODE: $00000100 VOL: 0
; 0000 00B8             case 0b10000:
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00B9                 // Switch D7 is ON, other switches are OFF
; 0000 00BA                 // Perform corresponding actions
; 0000 00BB                 RxAddress[0] = 0x0E;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00BC                 RxAddress[1] = 0xDD;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 00BD                 RxAddress[2] = 0xCC;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00BE                 RxAddress[3] = 0xBB;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00BF                 RxAddress[4] = 0xCB;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00C0                 NRF24_Write_Register(RF_CH, 15); // will be setup during TX or RX
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00C1                 break;
;PCODE: $00000116 VOL: 0
; 0000 00C2 
; 0000 00C3   }
;PCODE: $00000117 VOL: 0
; 0000 00C4 
; 0000 00C5 
; 0000 00C6 }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;unsigned int averaging_adc()
; 0000 00C8 {   int i;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00C9     unsigned int value = 0;
; 0000 00CA     unsigned int array[40];
; 0000 00CB     for( i = 0; i < 40; i++)
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;	i -> R16,R17
;	value -> R18,R19
;	array -> Y+4
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 00CC     {
; 0000 00CD         array[i] = read_adc(3);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00CE     }
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00CF     for(i = 0; i < 40; i++)
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D0     {
; 0000 00D1        value += array[i];
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00D2     }
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 00D3     value /= 40;
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 00D4     return value;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 00D5 
; 0000 00D6 }
;PCODE: $00000154 VOL: 0
;
;
;
;void main(void)
; 0000 00DB {
;PCODE: $00000155 VOL: 0
; 0000 00DC 
; 0000 00DD // Declare your local variables here
; 0000 00DE 
; 0000 00DF // Input/Output Ports initialization
; 0000 00E0 // Port B initialization
; 0000 00E1 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=In
; 0000 00E2 DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00E3 // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=T
; 0000 00E4 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0000 00E5 
; 0000 00E6 // Port C initialization
; 0000 00E7 // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 00E8 DDRC=(1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 00E9 // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 00EA PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 00EB 
; 0000 00EC // Port D initialization
; 0000 00ED // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00EE DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00EF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00F0 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 00F1 
; 0000 00F2 // Timer/Counter 0 initialization
; 0000 00F3 // Clock source: System Clock
; 0000 00F4 // Clock value: 250.000 kHz
; 0000 00F5 TCCR0=(0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 00F6 TCNT0=0x06;
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00F7 
; 0000 00F8 // Timer/Counter 1 initialization
; 0000 00F9 // Clock source: System Clock
; 0000 00FA // Clock value: Timer1 Stopped
; 0000 00FB // Mode: Normal top=0xFFFF
; 0000 00FC // OC1A output: Disconnected
; 0000 00FD // OC1B output: Disconnected
; 0000 00FE // Noise Canceler: Off
; 0000 00FF // Input Capture on Falling Edge
; 0000 0100 // Timer1 Overflow Interrupt: Off
; 0000 0101 // Input Capture Interrupt: Off
; 0000 0102 // Compare A Match Interrupt: Off
; 0000 0103 // Compare B Match Interrupt: Off
; 0000 0104 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0105 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0106 TCNT1H=0xF8;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0107 TCNT1L=0x30;
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0108 ICR1H=0x00;
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0109 ICR1L=0x00;
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 010A OCR1AH=0x00;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0000 010B OCR1AL=0x00;
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 010C OCR1BH=0x00;
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 010D OCR1BL=0x00;
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 010E 
; 0000 010F // Timer/Counter 2 initialization
; 0000 0110 // Clock source: System Clock
; 0000 0111 // Clock value: Timer2 Stopped
; 0000 0112 // Mode: Normal top=0xFF
; 0000 0113 // OC2 output: Disconnected
; 0000 0114 ASSR=0<<AS2;
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0115 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0116 TCNT2=0x06;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 0117 OCR2=0x00;
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0118 
; 0000 0119 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 011A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<TOIE0);
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 011B 
; 0000 011C // External Interrupt(s) initialization
; 0000 011D // INT0: Off
; 0000 011E // INT1: Off
; 0000 011F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0120 
; 0000 0121 // USART initialization
; 0000 0122 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0123 // USART Receiver: On
; 0000 0124 // USART Transmitter: On
; 0000 0125 // USART Mode: Asynchronous
; 0000 0126 // USART Baud Rate: 9600
; 0000 0127 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0128 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
; 0000 0129 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 012A UBRRH=0x00;
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 012B UBRRL=0x0C;
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 012C 
; 0000 012D // Analog Comparator initialization
; 0000 012E // Analog Comparator: Off
; 0000 012F // The Analog Comparator's positive input is
; 0000 0130 // connected to the AIN0 pin
; 0000 0131 // The Analog Comparator's negative input is
; 0000 0132 // connected to the AIN1 pin
; 0000 0133 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0134 
; 0000 0135 // ADC initialization
; 0000 0136 // ADC Clock frequency: 1000.000 kHz
; 0000 0137 // ADC Voltage Reference: AREF pin
; 0000 0138 ADMUX=ADC_VREF_TYPE;
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 0139 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (1<<ADPS0);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 013A SFIOR=(0<<ACME);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 013B 
; 0000 013C // SPI initialization
; 0000 013D // SPI Type: Master
; 0000 013E // SPI Clock Rate: 500.000 kHz
; 0000 013F // SPI Clock Phase: Cycle Start
; 0000 0140 // SPI Clock Polarity: Low
; 0000 0141 // SPI Data Order: MSB First
; 0000 0142 SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 0143 SPSR=(0<<SPI2X);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 0144 
; 0000 0145 // TWI initialization
; 0000 0146 // TWI disabled
; 0000 0147 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 0148 
; 0000 0149 // Global enable interrupts
; 0000 014A #asm("sei")
;PCODE: $0000019E VOL: 0
	sei
;PCODE: $0000019F VOL: 0
; 0000 014B PORTC.4 = 0;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 014C delay_ms(1000);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 014D 
; 0000 014E NRF24L01plus_Init();
;PCODE: $000001A4 VOL: 0
; 0000 014F DipSwitch();
;PCODE: $000001A5 VOL: 0
; 0000 0150 NRF24_RxMode(( uint8_t *)RxAddress,9);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 0151 
; 0000 0152 while (1)
;PCODE: $000001AA VOL: 0
; 0000 0153       {
; 0000 0154       // Place your code here
; 0000 0155 
; 0000 0156         voltage_battery =4.2*(2*(averaging_adc()/1023.00))/Tolerance_Res;// 1023  511.5
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0157         sprintf(str, "%.2f \n\r ", voltage_battery);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0158         //UART_SendString(str, 20);
; 0000 0159         Battery_monitoring(voltage_battery);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 015A 
; 0000 015B 
; 0000 015C     }
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 015D }
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
