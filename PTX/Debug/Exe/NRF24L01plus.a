;#include "NRF24L01plus.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include "uart.h"
;//------------------------------------------------------------
;
;uint8_t counter = 0;
;
;void NRF24_Write_Register(uint8_t reg, uint8_t Data)
; 0001 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0009 if(reg <= 31)
;PCODE: $0000000F VOL: 0
;	reg -> Y+1
;	Data -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 000A {
; 0001 000B    uint8_t buf[2];
; 0001 000C    buf[0] = reg|(1<<5);
;PCODE: $00000013 VOL: 0
;	reg -> Y+3
;	Data -> Y+2
;	buf -> Y+0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 000D    buf[1] = Data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 000E    CSN_Enable;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0001 000F    SPI_Transmit(buf[0]);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 0010    SPI_Transmit(buf[1]);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0011    CSN_Disable;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0012 }
;PCODE: $00000021 VOL: 0
; 0001 0013 }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void NRF24_WriteMulti_Register(uint8_t reg, uint8_t * Data, uint8_t size)
; 0001 0016 {   uint8_t i;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0001 0017     uint8_t buf;
; 0001 0018     buf = reg | (1 << 5);// write function
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	reg -> Y+5
;	*Data -> Y+3
;	size -> Y+2
;	i -> R17
;	buf -> R16
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0019     CSN_Enable;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 001A     SPI_Transmit(buf);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 001B     SPI_TransmitBytes(Data, size);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0001 001C     CSN_Disable;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001D }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;
;uint8_t NRF24_Read_Register(uint8_t reg)
; 0001 0020 {
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0021 if(reg <= 31)
;PCODE: $0000003E VOL: 0
;	reg -> Y+0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0022 {
; 0001 0023     uint8_t Data = 0;
; 0001 0024     CSN_Enable;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;	reg -> Y+1
;	Data -> Y+0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0001 0025     SPI_Transmit(reg);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0026     Data = SPI_Receive();
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0027     CSN_Disable;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0001 0028     return Data;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0001 0029 }
;PCODE: $00000051 VOL: 0
; 0001 002A return 0;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0001 002B }
;PCODE: $00000056 VOL: 0
;
;void NRF24_ReadMulti_Register(uint8_t reg, uint8_t *data, uint8_t size)
; 0001 002E {
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0001 002F     CSN_Enable;
;PCODE: $00000059 VOL: 0
;	reg -> Y+3
;	*data -> Y+1
;	size -> Y+0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0030 
; 0001 0031     SPI_Transmit(reg);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 0032     SPI_ReceiveBytes(data, size);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0033 
; 0001 0034     CSN_Disable;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0035 }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;
;
;// send the command to the NRF
;void NRF24_SendCMD(uint8_t cmd)
; 0001 003A {
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 003B     CSN_Enable;
;PCODE: $0000006A VOL: 0
;	cmd -> Y+0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0001 003C     SPI_Transmit(cmd);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0001 003D     CSN_Disable;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0001 003E }
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;//----------------------------------------------------
;
;
;void NRF24L01plus_Init()
; 0001 0043 {
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0001 0044     uint8_t config;
; 0001 0045     CE_Disable;
;PCODE: $00000076 VOL: 0
;	config -> R17
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0046     NRF_RESET(0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0001 0047     NRF24_Write_Register(CONFIG,0); // will be configured later
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0048     NRF24_Write_Register(SETUP_RETR, 0xFF); // Enable automatic retransmission with maximum delay and retries
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0001 0049   //  NRF24_Write_Register(RF_CH, 0); // will be setup during TX or RX
; 0001 004A     NRF24_Write_Register(SETUP_AW, 0x03);//5byte for  TX/RX Address
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0001 004B     NRF24_Write_Register(RF_SETUP, 0x0E); // Power = 0db, data rate =  250kbps
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0001 004C     NRF24_Write_Register(FEATURE,0x06); //EN_ACK_PAY  ,  EN_DPL
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 004D     config = NRF24_Read_Register(CONFIG);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0001 004E     config = config | (1<<3) | (1 << 2); // CRC ENABLE ,  CRC 2BYTE
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0001 004F     NRF24_Write_Register(CONFIG, config);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 0050 
; 0001 0051     CE_Enable;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 0052 }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;/*----------------------------------------------*/
;/*-----------------TxMode-----------------------*/
;void NRF24_TXMode( uint8_t const* Address, uint8_t channel)
; 0001 0056  {
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 0057     uint8_t config = 0;
; 0001 0058     uint8_t dynpd = 0;
; 0001 0059     CE_Disable;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;	*Address -> Y+3
;	channel -> Y+2
;	config -> R17
;	dynpd -> R16
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0001 005A 
; 0001 005B     NRF24_Write_Register(RF_CH, channel); // select the channel
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0001 005C 
; 0001 005D     NRF24_WriteMulti_Register(TX_ADDR, Address, 5); // Write the TX address
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 005E 
; 0001 005F     // power up the device
; 0001 0060     config = NRF24_Read_Register(CONFIG);
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 0061     config = (config | (1<<1)) & 0b11111110;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0001 0062     NRF24_Write_Register(CONFIG, config);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 0063 
; 0001 0064     // Enable Enhanced ShockBurst
; 0001 0065     NRF24_Write_Register(EN_AA, 0x02); // Enable Auto ACK on pipe 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 0066     NRF24_Write_Register(EN_RXADDR, 0x02); // Enable data pipe 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 0067     NRF24_Write_Register(DYNPD, 0x02); //Enable DPL  PIPE 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0001 0068     NRF24_WriteMulti_Register(RX_ADDR_P1, Address, 5); //Write the TX address
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 0069     delay_ms(500);
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 006A 
; 0001 006B 
; 0001 006C 
; 0001 006D  }
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;
;void set_addr( uint8_t const* Address, uint8_t channel)
; 0001 0070  {
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0001 0071     uint8_t config = 0;
; 0001 0072     uint8_t dynpd = 0;
; 0001 0073     CE_Disable;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;	*Address -> Y+3
;	channel -> Y+2
;	config -> R17
;	dynpd -> R16
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 0074     config = NRF24_Read_Register(CONFIG);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0001 0075     config = config | (1<<0);
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0001 0076     NRF24_Write_Register(CONFIG, config);
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0001 0077 
; 0001 0078     NRF24_Write_Register(RF_CH, channel); // select the channel
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0001 0079     NRF24_WriteMulti_Register(TX_ADDR, Address, 5); // Write the TX address
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0001 007A 
; 0001 007B     // power up the device
; 0001 007C     config = NRF24_Read_Register(CONFIG);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 007D     config = (config | (1<<1)) & 0b11111110;
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0001 007E     NRF24_Write_Register(CONFIG, config);
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0001 007F 
; 0001 0080     // Enable Enhanced ShockBurst
; 0001 0081     NRF24_Write_Register(EN_AA, 0x01); // Enable Auto ACK on pipe 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0001 0082     NRF24_Write_Register(EN_RXADDR, 0x01); // Enable data pipe 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0001 0083     NRF24_Write_Register(DYNPD, 0x01); //Enable DPL  PIPE 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 0084     NRF24_WriteMulti_Register(RX_ADDR_P0, Address, 5); //Write the TX address
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0001 0085 
; 0001 0086     delay_ms(300);
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 0087  }
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;
;void nrf24_state(uint8_t state)
; 0001 008A {
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 008B 	uint8_t config_register;
; 0001 008C     uint8_t data;
; 0001 008D 	config_register = NRF24_Read_Register(CONFIG);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;	state -> Y+2
;	config_register -> R17
;	data -> R16
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 008E 
; 0001 008F 	switch (state)
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0001 0090 	{
; 0001 0091 		case POWERUP:
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 0092 		// Check if already powered up
; 0001 0093 		if (!(config_register & (1 << PWR_UP)))
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0001 0094 		{
; 0001 0095 			data = config_register | (1 << PWR_UP);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0001 0096 			NRF24_Write_Register(CONFIG,data);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 0097 			// 1.5ms from POWERDOWN to start up
; 0001 0098 			delay_ms(2);
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0001 0099 		}
; 0001 009A 		break;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0001 009B 		case POWERDOWN:
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 009C 		data = config_register & ~(1 << PWR_UP);
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 009D 		NRF24_Write_Register(CONFIG,data);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0001 009E 		break;
;PCODE: $00000138 VOL: 0
; 0001 009F 		case RECEIVE:
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 00A0 		data = config_register | (1 << PRIM_RX);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00A1 		NRF24_Write_Register(CONFIG,data);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00A2 		// Clear STATUS register
; 0001 00A3 		data = (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 00A4 		NRF24_Write_Register(STATUS,data);
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 00A5 		break;
;PCODE: $00000149 VOL: 0
; 0001 00A6 		case TRANSMIT:
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 00A7 		data = config_register & ~(1 << PRIM_RX);
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0001 00A8 		NRF24_Write_Register(CONFIG,data);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0001 00A9 		break;
;PCODE: $00000154 VOL: 0
; 0001 00AA 		case STANDBY1:
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0001 00AB 		CE_Disable;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 00AC 		break;
;PCODE: $0000015A VOL: 0
; 0001 00AD 		case STANDBY2:
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0001 00AE 		data = config_register & ~(1 << PRIM_RX);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 00AF 		NRF24_Write_Register(CONFIG,data);
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0001 00B0 		CE_Enable;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0001 00B1 		delay_us(150);
;PCODE: $00000167 VOL: 0
; 0001 00B2 		break;
;PCODE: $00000168 VOL: 0
; 0001 00B3 	}
;PCODE: $00000169 VOL: 0
; 0001 00B4 }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;
;
;void nrf24_start_listening(void)
; 0001 00B8 {
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0001 00B9 	nrf24_state(RECEIVE);				// Receive mode
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0001 00BA 	//if (AUTO_ACK) nrf24_write_ack();	// Write acknowledgment
; 0001 00BB     CE_Enable;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0001 00BC     delay_us(150);						// Settling time
;PCODE: $00000174 VOL: 0
; 0001 00BD }
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;
;
;uint8_t NRF24_Transmit(uint8_t* data , uint8_t length)
; 0001 00C1  {
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0001 00C2 
; 0001 00C3     uint8_t cmdtosend = 0;
; 0001 00C4     uint8_t fifostatus = 0;
; 0001 00C5     uint8_t status = 0 ;
; 0001 00C6     uint8_t data_reg = 0;
; 0001 00C7     //Select the device
; 0001 00C8     	// Transmit mode
; 0001 00C9 	nrf24_state(TRANSMIT);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;	*data -> Y+5
;	length -> Y+4
;	cmdtosend -> R17
;	fifostatus -> R16
;	status -> R19
;	data_reg -> R18
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0001 00CA 
; 0001 00CB     // Flush TX/RX and clear TX interrupt
; 0001 00CC 	NRF24_Write_Register(FLUSH_RX,0);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0001 00CD 	NRF24_Write_Register(FLUSH_TX,0);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0001 00CE 	data_reg = (1 << TX_DS);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0001 00CF 	NRF24_Write_Register(STATUS,data_reg);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0001 00D0 
; 0001 00D1   CE_Enable;
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
; 0001 00D2   delay_us(100);
;PCODE: $00000195 VOL: 0
; 0001 00D3   CE_Disable;
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0001 00D4 
; 0001 00D5   CSN_Enable;
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0001 00D6     cmdtosend = W_TX_PAYLOAD;
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0001 00D7     SPI_Transmit(cmdtosend);
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0001 00D8     SPI_Transmit_nrf24(data,length);
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0001 00D9     PORTC.5 = 0;
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0001 00DA   CSN_Disable;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0001 00DB 
; 0001 00DC   delay_ms(3);//10000 US
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0001 00DD 
; 0001 00DE 
; 0001 00DF    //fifostatus = NRF24_Read_Register(FIFO_STATUS);
; 0001 00E0     status = NRF24_Read_Register(STATUS);
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0001 00E1     if (status&(1<<5))//(fifostatus&(1<<4)) && (!(fifostatus&(1<<3))))
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0001 00E2     {
; 0001 00E3     PORTC.5 = 1;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0001 00E4      counter  = 0;
;PCODE: $000001B2 VOL: 0
; 0001 00E5     // cmdtosend = FLUSH_TX;
; 0001 00E6     // NRF24_SendCMD(cmdtosend);
; 0001 00E7     nrf24_start_listening();
;PCODE: $000001B3 VOL: 0
; 0001 00E8     NRF24_Write_Register(STATUS, status);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0001 00E9     data_reg = NRF24_Read_Register(CONFIG);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0001 00EA     data_reg = data_reg & 0b11111101;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0001 00EB     NRF24_Write_Register(CONFIG,data_reg);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0001 00EC 
; 0001 00ED      return 1;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0001 00EE     }
; 0001 00EF     //power down
; 0001 00F0     data_reg = NRF24_Read_Register(CONFIG);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0001 00F1     data_reg = data_reg & 0b11111101;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0001 00F2     NRF24_Write_Register(CONFIG,data_reg);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0001 00F3     //-----
; 0001 00F4 
; 0001 00F5     return 0;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0001 00F6  }
;PCODE: $000001D3 VOL: 0
;
;
;void NRF24_RxMode (uint8_t *Address, uint8_t channel)
; 0001 00FA  {
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0001 00FB     uint8_t en_rxaddr;
; 0001 00FC     uint8_t en_aa;
; 0001 00FD     uint8_t config;
; 0001 00FE     NRF_RESET(STATUS);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;	*Address -> Y+5
;	channel -> Y+4
;	en_rxaddr -> R17
;	en_aa -> R16
;	config -> R19
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0001 00FF     //Disable the chip before configuring the device
; 0001 0100     CE_Disable;
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0001 0101 
; 0001 0102     NRF24_Write_Register(RF_CH, channel); // select the channel
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0001 0103 
; 0001 0104     en_rxaddr = NRF24_Read_Register(EN_RXADDR);
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0001 0105     en_rxaddr = en_rxaddr | (1 << 1);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0001 0106     NRF24_Write_Register(EN_RXADDR, en_rxaddr); // enable data pipe 1
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0001 0107     en_aa = NRF24_Read_Register(EN_AA);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0001 0108     en_aa = en_aa | (1 << 1);
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0001 0109     NRF24_Write_Register(EN_AA, en_aa); // enable auto acknowledgment for data pipe 1
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0001 010A 
; 0001 010B //    NRF24_WriteMulti_Register(RX_ADDR_P1, Address, 5); // Write the RX address for data pipe 1
; 0001 010C     NRF24_Write_Register(DYNPD, 0x02); // DPL for PIPE 1
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0001 010D 
; 0001 010E     // power up the device and enable Enhanced ShockBurst
; 0001 010F     config = NRF24_Read_Register(CONFIG);
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0001 0110     config = config | (1 << 1) | (1 << 0);
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0001 0111     NRF24_Write_Register(CONFIG, config);
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0001 0112 
; 0001 0113     // Enable the chip after configuring the device
; 0001 0114     CE_Enable;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0001 0115 
; 0001 0116  }
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;void setRX_Address(uint8_t const* Address)
; 0001 0118 {
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0001 0119     NRF24_WriteMulti_Register(RX_ADDR_P1, Address, 5); // Write the RX address for data pipe 1
;PCODE: $00000207 VOL: 0
;	*Address -> Y+0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0001 011A }
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;
;void writeAckPayload(uint8_t number_pipe, uint8_t *Data, uint8_t DataSize)
; 0001 011D     {
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0001 011E      uint8_t cmdtosend;
; 0001 011F     cmdtosend = W_ACK_PAYLOAD;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;	number_pipe -> Y+4
;	*Data -> Y+2
;	DataSize -> Y+1
;	cmdtosend -> R17
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0001 0120     SPI_Transmit(cmdtosend |(number_pipe & 0x07));
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0001 0121     SPI_TransmitBytes(Data,DataSize);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0001 0122 
; 0001 0123     CSN_Enable;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0001 0124     }
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;
;uint8_t isDataAvailable(int pipenum)
; 0001 0127 {
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0001 0128 
; 0001 0129     uint8_t status;
; 0001 012A     uint8_t cmdtosend;
; 0001 012B     uint8_t length;
; 0001 012C     status = NRF24_Read_Register(STATUS);
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;	pipenum -> Y+4
;	status -> R17
;	cmdtosend -> R16
;	length -> R19
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0001 012D     if((status&(1<<6))&&(status&(pipenum<<1)))
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0001 012E     {
; 0001 012F 
; 0001 0130         NRF24_Write_Register(STATUS, (1<<6));
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0001 0131         NRF24_Write_Register(STATUS, (1<<5));
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0001 0132 
; 0001 0133         return 1;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0001 0134     }
; 0001 0135     return 0;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0001 0136 
; 0001 0137 }
;PCODE: $0000024E VOL: 0
;
;void NRF24_Recive(uint8_t *data,uint8_t length)
; 0001 013A {
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0001 013B  uint8_t cmdtosend = 0;
; 0001 013C  uint8_t i;
; 0001 013D 
; 0001 013E  // select the device
; 0001 013F 
; 0001 0140  CSN_Enable;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;	*data -> Y+3
;	length -> Y+2
;	cmdtosend -> R17
;	i -> R16
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0001 0141 
; 0001 0142  cmdtosend = R_RX_PAYLOAD;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0001 0143  SPI_Transmit(cmdtosend);
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0001 0144  SPI_ReceiveBytes(data,length);
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0001 0145 
; 0001 0146 /*
; 0001 0147 
; 0001 0148 cmdtosend = R_RX_PL_WID;
; 0001 0149 SPI_Transmit(cmdtosend);
; 0001 014A length = SPI_Receive();
; 0001 014B 
; 0001 014C */
; 0001 014D // Unselect the device
; 0001 014E 
; 0001 014F  CSN_Disable;
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0001 0150  cmdtosend = FLUSH_RX;
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0001 0151  NRF24_SendCMD(cmdtosend);
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0001 0152 }
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;void nrf24_read(uint8_t *data)
; 0001 0154 {
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0001 0155      NRF24_Recive(data,32);
;PCODE: $0000026C VOL: 0
;	*data -> Y+0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0001 0156 }
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;void NRF_RESET(uint8_t REG)
; 0001 0158 {
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0001 0159 uint8_t rx_addr_p0_def[5]= {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
; 0001 015A uint8_t rx_addr_p1_def[5]=  {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
; 0001 015B uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
; 0001 015C uint8_t status;
; 0001 015D     if (REG == STATUS)
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;	REG -> Y+16
;	rx_addr_p0_def -> Y+11
;	rx_addr_p1_def -> Y+6
;	tx_addr_def -> Y+1
;	status -> R17
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0001 015E     {
; 0001 015F      status = NRF24_Read_Register(STATUS);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0001 0160      status = status | (1 << 4) | (1 << 5) | (1 << 6);
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0001 0161      NRF24_Write_Register(STATUS, status);
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0001 0162     }
; 0001 0163 
; 0001 0164     else if (REG == FIFO_STATUS)
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0001 0165     {
; 0001 0166         NRF24_Write_Register(FIFO_STATUS, 0x11);
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0001 0167 
; 0001 0168     }
; 0001 0169     else {
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0001 016A         NRF24_Write_Register(CONFIG, 0x08);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0001 016B         NRF24_Write_Register(EN_AA, 0x3F);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0001 016C         NRF24_Write_Register(EN_RXADDR, 0x03);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0001 016D         NRF24_Write_Register(SETUP_AW, 0x03);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0001 016E         NRF24_Write_Register(SETUP_RETR, 0x03);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0001 016F         NRF24_Write_Register(RF_CH, 0x02);
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0001 0170         NRF24_Write_Register(RF_SETUP, 0x0E);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0001 0171         NRF24_Write_Register(STATUS, 0x00);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0001 0172         NRF24_Write_Register(OBSERVE_TX, 0x00);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0001 0173         NRF24_Write_Register(CD, 0x00);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0001 0174         NRF24_WriteMulti_Register(RX_ADDR_P0, rx_addr_p0_def, 5);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0001 0175         NRF24_WriteMulti_Register(RX_ADDR_P1, rx_addr_p1_def, 5);
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0001 0176         NRF24_Write_Register(RX_ADDR_P2, 0xC3);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0001 0177         NRF24_Write_Register(RX_ADDR_P3, 0xC4);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0001 0178         NRF24_Write_Register(RX_ADDR_P4, 0xC5);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0001 0179         NRF24_Write_Register(RX_ADDR_P5, 0xC6);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0001 017A         NRF24_WriteMulti_Register(TX_ADDR, tx_addr_def, 5);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0001 017B         NRF24_Write_Register(RX_PW_P0, 0);
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0001 017C         NRF24_Write_Register(RX_PW_P1, 0);
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0001 017D         NRF24_Write_Register(RX_PW_P2, 0);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0001 017E         NRF24_Write_Register(RX_PW_P3, 0);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0001 017F         NRF24_Write_Register(RX_PW_P4, 0);
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0001 0180         NRF24_Write_Register(RX_PW_P5, 0);
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
; 0001 0181         NRF24_Write_Register(FIFO_STATUS, 0x11);
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0001 0182         NRF24_Write_Register(DYNPD, 0);
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0001 0183         NRF24_Write_Register(FEATURE, 0);
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0001 0184     }
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0001 0185 }
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;
;void PowerDown()
; 0001 0188 {
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
; 0001 0189     // power up the device
; 0001 018A     uint8_t config;
; 0001 018B     config = NRF24_Read_Register(CONFIG);
;PCODE: $0000030B VOL: 0
;	config -> R17
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
; 0001 018C     config = config | (0<<1) ;
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
; 0001 018D     NRF24_Write_Register(CONFIG, config);
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0001 018E }
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;
;void PowerUP()
; 0001 0191 {
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0001 0192     // power up the device
; 0001 0193 
; 0001 0194     uint8_t config;
; 0001 0195     config = NRF24_Read_Register(CONFIG);
;PCODE: $0000031A VOL: 0
;	config -> R17
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0001 0196     config = config | (1<<1) ;
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
; 0001 0197     NRF24_Write_Register(CONFIG, config);
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
; 0001 0198 }
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
