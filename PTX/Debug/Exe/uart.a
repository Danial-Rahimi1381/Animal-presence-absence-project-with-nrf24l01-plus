;#include "uart.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;unsigned char UART_RxChar()
; 0002 0004 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0005     while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0002 0006     return(UDR);            /* Return the byte*/
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0002 0007 }
;PCODE: $00000017 VOL: 0
;
;void UART_TxChar(uint8_t ch)
; 0002 000A {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0002 000B 	while (! (UCSRA & (1<<UDRE)));  /* Wait for empty transmit buffer */
;PCODE: $0000001A VOL: 0
;	ch -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0002 000C 	UDR = ch ;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0002 000D }
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;
;void UART_SendString(uint8_t *str, uint8_t length)
; 0002 0010 {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0002 0011 int i;
; 0002 0012 for(i = 0; i< length;++i)
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;	*str -> Y+3
;	length -> Y+2
;	i -> R16,R17
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0002 0013 {
; 0002 0014     UART_TxChar(str[i]);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0002 0015 }
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0002 0016 }
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;void UART_SendString2(char *str)
; 0002 0019 {
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0002 001A 	unsigned char j=0;
; 0002 001B 
; 0002 001C 	while (str[j]!=0)		/* Send string till null */
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;	*str -> Y+1
;	j -> R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0002 001D 	{
; 0002 001E 		UART_TxChar(str[j]);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0002 001F 		j++;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0002 0020 	}
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0002 0021 }
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
