;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.14 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/22/2023
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8A
;Program type            : Application
;AVR Core Clock frequency: 2.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// SPI functions
;#include <spi.h>
;#include "NRF24L01plus.h"
;#include "uart.h"
;
;// Timer1 output compare A interrupt service routine
;uint16_t counter_delay = 0;
;uint16_t request_counter_delay = 20;
;uint8_t dipSwitchStatus = 0;
;uint8_t  TxAddress[10][5] =
;{
;    {0x00,0xDD,0xCC,0xBB,0xCB},
;    {0x03,0xDD,0xCC,0xBB,0xCB},
;    {0x06,0xDD,0xCC,0xBB,0xCB},
;    {0x09,0xDD,0xCC,0xBB,0xCB},
;    {0x0C,0xDD,0xCC,0xBB,0xCB},
;    {0x0F,0xDD,0xCC,0xBB,0xCB},
;    {0x12,0xDD,0xCC,0xBB,0xCB},
;    {0x15,0xDD,0xCC,0xBB,0xCB},
;    {0x18,0xDD,0xCC,0xBB,0xCB},
;    {0x1B,0xDD,0xCC,0xBB,0xCB}
;};

	.DSEG
;uint8_t TxData[10][6] = {
;    {0, 0, 0, 0, 0, 0},
;    {1, 1, 1, 1, 1, 1},
;    {2, 2, 2, 2, 2, 2},
;    {3, 3, 3, 3, 3, 3},
;    {4, 4, 4, 4, 4, 4},
;    {5, 5, 5, 5, 5, 5},
;    {6, 6, 6, 6, 6, 6},
;    {7, 7, 7, 7, 7, 7},
;    {8, 8, 8, 8, 8, 8},
;    {9, 9, 9, 9, 9, 9}
;};
;uint8_t flag_tx = 0;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)//10ms
; 0000 0043 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0044 // Place your code here
; 0000 0045 counter_delay++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0046 if(counter_delay >= request_counter_delay)
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0047 {
; 0000 0048   flag_tx = 1;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0049   counter_delay = 0;
;PCODE: $00000017 VOL: 0
; 0000 004A }
; 0000 004B }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;void DipSwitch(void)
; 0000 004D {
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 004E  dipSwitchStatus = ~((PIND  & 0xF8) >> 3) & 0x1F;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004F  set_addr(TxAddress[dipSwitchStatus],3 * dipSwitchStatus);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0050 
; 0000 0051 }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;void main(void)
; 0000 0053 {
;PCODE: $00000031 VOL: 0
; 0000 0054 
; 0000 0055 // Declare your local variables here
; 0000 0056 
; 0000 0057 // Input/Output Ports initialization
; 0000 0058 // Port B initialization
; 0000 0059 // Function: Bit7=In Bit6=In Bit5=Out Bit4=In Bit3=Out Bit2=Out Bit1=In Bit0=In
; 0000 005A DDRB=(0<<DDB7) | (0<<DDB6) | (1<<DDB5) | (0<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (0<<DDB0);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 005B // State: Bit7=T Bit6=T Bit5=0 Bit4=T Bit3=0 Bit2=0 Bit1=T Bit0=T
; 0000 005C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 005D 
; 0000 005E // Port C initialization
; 0000 005F // Function: Bit6=In Bit5=Out Bit4=Out Bit3=In Bit2=Out Bit1=Out Bit0=Out
; 0000 0060 DDRC=(0<<DDC6) | (1<<DDC5) | (1<<DDC4) | (0<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0061 // State: Bit6=T Bit5=0 Bit4=0 Bit3=T Bit2=0 Bit1=0 Bit0=0
; 0000 0062 PORTC=(0<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (0<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0063 
; 0000 0064 // Port D initialization
; 0000 0065 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0066 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0067 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0068 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (1<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0069 
; 0000 006A // Timer/Counter 0 initialization
; 0000 006B // Clock source: System Clock
; 0000 006C // Clock value: Timer 0 Stopped
; 0000 006D TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 006E TCNT0=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 006F 
; 0000 0070 // Timer/Counter 1 initialization
; 0000 0071 // Clock source: System Clock
; 0000 0072 // Clock value: 250.000 kHz
; 0000 0073 // Mode: Fast PWM top=ICR1
; 0000 0074 // OC1A output: Disconnected
; 0000 0075 // OC1B output: Disconnected
; 0000 0076 // Noise Canceler: Off
; 0000 0077 // Input Capture on Falling Edge
; 0000 0078 // Timer Period: 10 ms
; 0000 0079 // Timer1 Overflow Interrupt: Off
; 0000 007A // Input Capture Interrupt: Off
; 0000 007B // Compare A Match Interrupt: On
; 0000 007C // Compare B Match Interrupt: Off
; 0000 007D TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (1<<WGM11) | (0<<WGM10);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 007E TCCR1B=(0<<ICNC1) | (0<<ICES1) | (1<<WGM13) | (1<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007F TCNT1H=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0080 TCNT1L=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0081 ICR1H=0x09;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0082 ICR1L=0xC3;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0083 OCR1AH=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0084 OCR1AL=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0085 OCR1BH=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0086 OCR1BL=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0087 
; 0000 0088 
; 0000 0089 // Timer/Counter 2 initialization
; 0000 008A // Clock source: System Clock
; 0000 008B // Clock value: Timer2 Stopped
; 0000 008C // Mode: Normal top=0xFF
; 0000 008D // OC2 output: Disconnected
; 0000 008E ASSR=0<<AS2;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 008F TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0090 TCNT2=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0091 OCR2=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0092 
; 0000 0093 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0094 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0095 
; 0000 0096 // External Interrupt(s) initialization
; 0000 0097 // INT0: Off
; 0000 0098 // INT1: Off
; 0000 0099 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 009A 
; 0000 009B // USART initialization
; 0000 009C // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 009D // USART Receiver: On
; 0000 009E // USART Transmitter: On
; 0000 009F // USART Mode: Asynchronous
; 0000 00A0 // USART Baud Rate: 9600
; 0000 00A1 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00A2 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00A3 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00A4 UBRRH=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00A5 UBRRL=0x0C;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00A6 
; 0000 00A7 // Analog Comparator initialization
; 0000 00A8 // Analog Comparator: Off
; 0000 00A9 // The Analog Comparator's positive input is
; 0000 00AA // connected to the AIN0 pin
; 0000 00AB // The Analog Comparator's negative input is
; 0000 00AC // connected to the AIN1 pin
; 0000 00AD ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00AE SFIOR=(0<<ACME);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00AF 
; 0000 00B0 // ADC initialization
; 0000 00B1 // ADC disabled
; 0000 00B2 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00B3 
; 0000 00B4 // SPI initialization
; 0000 00B5 // SPI Type: Master
; 0000 00B6 // SPI Clock Rate: 500.000 kHz
; 0000 00B7 // SPI Clock Phase: Cycle Start
; 0000 00B8 // SPI Clock Polarity: Low
; 0000 00B9 // SPI Data Order: MSB First
; 0000 00BA SPCR=(0<<SPIE) | (1<<SPE) | (0<<DORD) | (1<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00BB SPSR=(0<<SPI2X);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00BC 
; 0000 00BD // TWI initialization
; 0000 00BE // TWI disabled
; 0000 00BF TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C0 NRF24L01plus_Init();
;PCODE: $00000078 VOL: 0
; 0000 00C1 NRF24_TXMode(TxAddress[dipSwitchStatus],0);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00C2 #asm("sei")
;PCODE: $00000080 VOL: 0
	sei
;PCODE: $00000081 VOL: 0
; 0000 00C3 
; 0000 00C4 while (1)
;PCODE: $00000082 VOL: 0
; 0000 00C5       {
; 0000 00C6       DipSwitch();
;PCODE: $00000083 VOL: 0
; 0000 00C7       UART_TxChar(dipSwitchStatus);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00C8       UART_TxChar('\n');
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C9       UART_TxChar('\r');
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00CA       // Place your code here
; 0000 00CB       if(flag_tx)
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CC       {   counter_delay = 0;
;PCODE: $0000008C VOL: 0
; 0000 00CD           flag_tx = 0;
;PCODE: $0000008D VOL: 0
; 0000 00CE 
; 0000 00CF           switch(NRF24_Transmit(TxData[dipSwitchStatus],5))
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00D0            {
; 0000 00D1               case 0:
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00D2                  request_counter_delay = 20;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00D3                  break;
;PCODE: $00000099 VOL: 0
; 0000 00D4               case 1:
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00D5                   request_counter_delay = 300;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D6                   PORTC.4 = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D7                   delay_ms(100);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D8                   PORTC.4 = 1;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00D9               break;
;PCODE: $000000A6 VOL: 0
; 0000 00DA 
; 0000 00DB 
; 0000 00DC            }
;PCODE: $000000A7 VOL: 0
; 0000 00DD       }
; 0000 00DE       }
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00DF }
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
